buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

group 'SuperiorPrison'
version '1.0-SNAPSHOT'
apply plugin: 'maven'
apply plugin: 'base'

allprojects {

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        jcenter()
        mavenLocal()
        maven { url 'https://repo.codemc.org/repository/nms/' }
        maven { url 'https://repo.codemc.org/repository/maven-public/' }
    }

    dependencies {
        if (!project.name.startsWith("nms"))
            compileOnly "org.spigotmc:spigot:1.8.8-R0.1-SNAPSHOT"
        compileOnly 'org.projectlombok:lombok:1.18.8'
        annotationProcessor 'org.projectlombok:lombok:1.18.8'

        if (project.name.equalsIgnoreCase("plugin")) {
            compile "com.oop.orangeengine:file:+"
            compile "com.oop.orangeengine:item:+"
            compile "com.oop.orangeengine:engine:+"
            compile "com.oop.orangeengine:particle:+"
            compile "com.oop.orangeengine:inventory:+"
            compile "com.oop.orangeengine:command:+"
            compile "com.oop.orangeengine:database:+"
            compile "com.oop.orangeengine:eventssubscription:+"
            compile "com.oop.orangeengine:message:+"

        } else {
            compileOnly "com.oop.orangeengine:file:+"
            compileOnly "com.oop.orangeengine:item:+"
            compileOnly "com.oop.orangeengine:engine:+"
            compileOnly "com.oop.orangeengine:particle:+"
            compileOnly "com.oop.orangeengine:inventory:+"
            compileOnly "com.oop.orangeengine:command:+"
            compileOnly "com.oop.orangeengine:database:+"
            compileOnly "com.oop.orangeengine:eventssubscription:+"
            compileOnly "com.oop.orangeengine:message:+"
        }

        if (project.name.equalsIgnoreCase("plugin")) {
            compile project(":api")

        } else if (!project.name.equalsIgnoreCase("api"))
            compileOnly project(":plugin")
    }

    shadowJar {
        destinationDir file('../archive')
        archiveName project.name + ".jar"

        relocate("com.oop.orangeengine", "com.bgsoftware.superiorprison.engine")
    }

    tasks.build.dependsOn tasks.shadowJar
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path)}

shadowJar {
    archiveName = 'SuperiorPrison.jar'
    destinationDir = file("./target")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from fileTree(dir: "archive").collect {
        zipTree(it)
    }

}
shadowJar.dependsOn(subprojects.shadowJar)
